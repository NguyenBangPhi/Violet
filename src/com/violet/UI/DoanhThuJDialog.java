/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.violet.UI;

import com.violet.DAO.DoanhThuDAO;
import com.violet.DAO.HoaDonThanhToanPhongDAO;
import com.violet.Help.HeaderColor;
import com.violet.Help.MsgBox;
import com.violet.Help.XDate;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.model.StylesTable;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.extensions.XSSFCellBorder;

/**
 *
 * @author Admin
 */
public class DoanhThuJDialog extends javax.swing.JDialog {

    /**
     * Creates new form DoanhThuJDialog
     */
    public DoanhThuJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBackground = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        cboThang = new javax.swing.JComboBox<>();
        lblThang = new javax.swing.JLabel();
        lblThang1 = new javax.swing.JLabel();
        cboNam = new javax.swing.JComboBox<>();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pblTongDoanhThu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTongDoanhThu = new javax.swing.JTable();
        pnlDoanhThuPhong = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoanhThuPhong = new javax.swing.JTable();
        pnlDoanhThuDichVu = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDoanhThuDichVu = new javax.swing.JTable();
        btnAll = new com.violet.UI.Button();
        btnXuatExcelTong = new com.violet.UI.Button();
        btnXuatExcePhong = new com.violet.UI.Button();
        btnXuatExcelDichVu = new com.violet.UI.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlBackground.setBackground(new java.awt.Color(255, 255, 255));

        lblTieuDe.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(32, 136, 203));
        lblTieuDe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTieuDe.setText("Doanh Thu");
        lblTieuDe.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(32, 136, 203), 10));

        cboThang.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        cboThang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboThangActionPerformed(evt);
            }
        });

        lblThang.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblThang.setText("Tháng");

        lblThang1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblThang1.setText("Năm");

        cboNam.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        cboNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNamActionPerformed(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        tblTongDoanhThu.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tblTongDoanhThu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MaHD", "Ngày Thu Phí", "Nhân Viên Thu", "Tổng Tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTongDoanhThu.setRowHeight(30);
        jScrollPane1.setViewportView(tblTongDoanhThu);

        javax.swing.GroupLayout pblTongDoanhThuLayout = new javax.swing.GroupLayout(pblTongDoanhThu);
        pblTongDoanhThu.setLayout(pblTongDoanhThuLayout);
        pblTongDoanhThuLayout.setHorizontalGroup(
            pblTongDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        pblTongDoanhThuLayout.setVerticalGroup(
            pblTongDoanhThuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tổng Doanh Thu  ", new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/TongDoanhThuIcon.png")), pblTongDoanhThu); // NOI18N

        tblDoanhThuPhong.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tblDoanhThuPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên Phòng", "Ngày Check In", "Ngày Check Out", "Tổng Tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoanhThuPhong.setRowHeight(30);
        jScrollPane2.setViewportView(tblDoanhThuPhong);

        javax.swing.GroupLayout pnlDoanhThuPhongLayout = new javax.swing.GroupLayout(pnlDoanhThuPhong);
        pnlDoanhThuPhong.setLayout(pnlDoanhThuPhongLayout);
        pnlDoanhThuPhongLayout.setHorizontalGroup(
            pnlDoanhThuPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        pnlDoanhThuPhongLayout.setVerticalGroup(
            pnlDoanhThuPhongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Doanh Thu Phòng  ", new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/DoanhThuPhongIcon.png")), pnlDoanhThuPhong); // NOI18N

        tblDoanhThuDichVu.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        tblDoanhThuDichVu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã Dịch Vụ", "Tên Dịch Vụ", "Tổng Tiền Thu Được"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoanhThuDichVu.setRowHeight(30);
        jScrollPane3.setViewportView(tblDoanhThuDichVu);

        javax.swing.GroupLayout pnlDoanhThuDichVuLayout = new javax.swing.GroupLayout(pnlDoanhThuDichVu);
        pnlDoanhThuDichVu.setLayout(pnlDoanhThuDichVuLayout);
        pnlDoanhThuDichVuLayout.setHorizontalGroup(
            pnlDoanhThuDichVuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        pnlDoanhThuDichVuLayout.setVerticalGroup(
            pnlDoanhThuDichVuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Doanh Thu Dịch Vụ  ", new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/DoanhThuDichVuIcon.png")), pnlDoanhThuDichVu); // NOI18N

        btnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/all-apps.png"))); // NOI18N
        btnAll.setText("Tất Cả");
        btnAll.setColor1(new java.awt.Color(255, 204, 204));
        btnAll.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnXuatExcelTong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/all-apps.png"))); // NOI18N
        btnXuatExcelTong.setText("Xuất Excel TDT");
        btnXuatExcelTong.setColor1(new java.awt.Color(255, 204, 204));
        btnXuatExcelTong.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnXuatExcelTong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelTongActionPerformed(evt);
            }
        });

        btnXuatExcePhong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/all-apps.png"))); // NOI18N
        btnXuatExcePhong.setText("Xuất Excel Phòng");
        btnXuatExcePhong.setColor1(new java.awt.Color(255, 204, 204));
        btnXuatExcePhong.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnXuatExcePhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcePhongActionPerformed(evt);
            }
        });

        btnXuatExcelDichVu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/violet/icon/all-apps.png"))); // NOI18N
        btnXuatExcelDichVu.setText("DV");
        btnXuatExcelDichVu.setColor1(new java.awt.Color(255, 204, 204));
        btnXuatExcelDichVu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnXuatExcelDichVu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelDichVuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTieuDe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboThang, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblThang))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblThang1)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnXuatExcelTong, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnXuatExcePhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnXuatExcelDichVu, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblThang)
                    .addComponent(lblThang1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboThang, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboNam, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuatExcelTong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuatExcePhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuatExcelDichVu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        // TODO add your handling code here:
        fillTableTongDoanhThu();
        fillTableDoanhThuPhong();
        fillTableDoanhThuDichVu();
    }//GEN-LAST:event_btnAllActionPerformed

    private void cboThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboThangActionPerformed
        // TODO add your handling code here:
        fillTableTongDoanhThuThangNam();
        fillTableDoanhThuPhongMonthAndYear();
        fillTableDoanhThuDichVu2();
    }//GEN-LAST:event_cboThangActionPerformed

    private void cboNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNamActionPerformed
        // TODO add your handling code here:
        fillTableTongDoanhThuThangNam();
        fillTableDoanhThuPhongMonthAndYear();
        fillTableDoanhThuDichVu2();
    }//GEN-LAST:event_cboNamActionPerformed

    private void btnXuatExcelTongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelTongActionPerformed
        //excel();
        printExel();
    }//GEN-LAST:event_btnXuatExcelTongActionPerformed

    private void btnXuatExcePhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcePhongActionPerformed
        //excel2();
        printExel2();
    }//GEN-LAST:event_btnXuatExcePhongActionPerformed

    private void btnXuatExcelDichVuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelDichVuActionPerformed
        //excel3();
        printExel3();
    }//GEN-LAST:event_btnXuatExcelDichVuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoanhThuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoanhThuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoanhThuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoanhThuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DoanhThuJDialog dialog = new DoanhThuJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.violet.UI.Button btnAll;
    private com.violet.UI.Button btnXuatExcePhong;
    private com.violet.UI.Button btnXuatExcelDichVu;
    private com.violet.UI.Button btnXuatExcelTong;
    private javax.swing.JComboBox<String> cboNam;
    private javax.swing.JComboBox<String> cboThang;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblThang;
    private javax.swing.JLabel lblThang1;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JPanel pblTongDoanhThu;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlDoanhThuDichVu;
    private javax.swing.JPanel pnlDoanhThuPhong;
    private javax.swing.JTable tblDoanhThuDichVu;
    private javax.swing.JTable tblDoanhThuPhong;
    private javax.swing.JTable tblTongDoanhThu;
    // End of variables declaration//GEN-END:variables
    
    HoaDonThanhToanPhongDAO daoTTP = new HoaDonThanhToanPhongDAO();
    DoanhThuDAO dao = new DoanhThuDAO();
    DecimalFormat format = new DecimalFormat("###,###,###");
    public void init(){
        this.setLocationRelativeTo(null);
        tblTongDoanhThu.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblTongDoanhThu.getParent().setBackground(Color.WHITE);
        tblTongDoanhThu.getTableHeader().setPreferredSize(new Dimension(40, 40));
        
        tblDoanhThuPhong.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblDoanhThuPhong.getParent().setBackground(Color.WHITE);
        tblDoanhThuPhong.getTableHeader().setPreferredSize(new Dimension(40, 40));
        
        tblDoanhThuDichVu.getTableHeader().setDefaultRenderer(new HeaderColor());
        tblDoanhThuDichVu.getParent().setBackground(Color.WHITE);
        tblDoanhThuDichVu.getTableHeader().setPreferredSize(new Dimension(40, 40));
        
        fillComboboxNam();
        fillComboboxThang();
        fillTableTongDoanhThu();
        fillTableDoanhThuPhong();
        fillTableDoanhThuDichVu();
    }
    
    private void fillComboboxThang(){
        cboThang.removeAllItems();
        for(int i = 1; i < 13; i++){
            cboThang.addItem(String.valueOf(i));
        }
    }
    
    private void fillComboboxNam(){
        cboNam.removeAllItems();
        for(int i = 0; i < daoTTP.selectNamHD().size(); i++){
            cboNam.addItem(String.valueOf(daoTTP.selectNamHD().get(i)));
        }
    }
    
    private void fillTableTongDoanhThu(){
        DefaultTableModel model = (DefaultTableModel) tblTongDoanhThu.getModel();
        model.setRowCount(0);
        List<Object[]> list = dao.getTongDoanhThuAll();       
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],row[2],format.format(row[3])});
        }
    }
    private void fillTableTongDoanhThuThangNam(){
        DefaultTableModel model = (DefaultTableModel) tblTongDoanhThu.getModel();
        model.setRowCount(0);
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        int thang = Integer.parseInt(cboThang.getSelectedItem().toString());
        int nam = Integer.parseInt(cboNam.getSelectedItem().toString());
        List<Object[]> list = dao.getTongDoanhThuMonthAndYear(thang, nam);
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],row[2],format.format(row[3])});
        }
    }
    
    private void fillTableDoanhThuPhong(){
        DefaultTableModel model = (DefaultTableModel) tblDoanhThuPhong.getModel();
        model.setRowCount(0);
        List<Object[]> list = dao.getTongDoanhThuPhong();
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],row[2],format.format(row[3])});
        }
    }
    
    private void fillTableDoanhThuPhongMonthAndYear(){
        DefaultTableModel model = (DefaultTableModel) tblDoanhThuPhong.getModel();
        model.setRowCount(0);
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        int thang = Integer.parseInt(cboThang.getSelectedItem().toString());
        int nam = Integer.parseInt(cboNam.getSelectedItem().toString());
        List<Object[]> list = dao.getDoanhThuPhongMonthAndYear(thang, nam);
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],row[2],format.format(row[3])});
        }
    }
    
    private void fillTableDoanhThuDichVu(){
        DefaultTableModel model = (DefaultTableModel) tblDoanhThuDichVu.getModel();
        model.setRowCount(0);
        List<Object[]> list = dao.getDoanhThuDichVu();
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],format.format(row[2])});
        }
    }

    private void fillTableDoanhThuDichVu2(){
        DefaultTableModel model = (DefaultTableModel) tblDoanhThuDichVu.getModel();
        model.setRowCount(0);
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        if(cboThang.getSelectedIndex() == -1){
            return;
        }
        int thang = Integer.parseInt(cboThang.getSelectedItem().toString());
        int nam = Integer.parseInt(cboNam.getSelectedItem().toString());
        List<Object[]> list = dao.getDoanhThuDichVu2(thang, nam);
        for(Object[] row : list){
            model.addRow(new Object[]{row[0],row[1],format.format(row[2])});
        }
    }
    
    private void excel() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Tổng Doanh Thu");
            spreadsheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 3));

            CellStyle cs = createStyleForHeader(spreadsheet);
            cs.setAlignment(HorizontalAlignment.CENTER);
                       
            CellStyle cs2 = createStyleForHeader(spreadsheet);
            cs2.setFillForegroundColor(IndexedColors.BLUE.getIndex());           
            cs2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cs2.setAlignment(HorizontalAlignment.CENTER);
            
            XSSFRow row = null;
            Cell cell = null;

//            XSSFCellStyle style = new XSSFCellStyle(new StylesTable());
//            style.setAlignment(HorizontalAlignment.CENTER);
            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);            
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Tổng Doanh Thu của Khách Sạn !");
            cell.setCellStyle(cs2);
            

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Mã Hóa Đơn");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Ngày Thu Phí");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Nhân Viên Thu");
            
            cell = row.createCell(3, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Tổng Tiền");
                       
//            List<Object[]> list = dao.getBangDiem(kh.getMaKH());
//            int stt = 0;
//            for(Object[] rows:list){               
//                row = spreadsheet.createRow((short) 4 + stt);
//                row.setHeight((short) 400);               
//                row.createCell(0).setCellValue(stt + 1);
//                row.createCell(1).setCellValue(rows[0].toString());
//                row.createCell(2).setCellValue(rows[1].toString());
//                row.createCell(3).setCellValue(rows[2].toString());
//                stt++;
//            }
            for(int i = 0; i < tblTongDoanhThu.getRowCount();i++){
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short)400);
                row.createCell(0).setCellValue(tblTongDoanhThu.getValueAt(i, 0).toString());
                if(tblTongDoanhThu.getValueAt(i, 1) == null){
                    row.createCell(1).setCellValue("");
                }else{
                    row.createCell(1).setCellValue(tblTongDoanhThu.getValueAt(i, 1).toString());                    
                }
                
                row.createCell(2).setCellValue(tblTongDoanhThu.getValueAt(i, 2).toString());
                row.createCell(3).setCellValue(tblTongDoanhThu.getValueAt(i, 3).toString());
            }
            autosizeColumn(spreadsheet, 5);
            //FileOutputStream out = new FileOutputStream(new File("D:/hv.xlsx"));
            JFileChooser fc = new JFileChooser();
            if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File name = fc.getSelectedFile();
                FileOutputStream out = new FileOutputStream(name);
                workbook.write(out);
                out.close();
                MsgBox.alert(this, "Lưu Thành Công !");
            }
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lưu thất bại !");
        }
    }
    private void autosizeColumn(Sheet sheet, int lastColumn) {
        for (int columnIndex = 0; columnIndex < lastColumn; columnIndex++) {
            sheet.autoSizeColumn(columnIndex);
        }
    }
    private CellStyle createStyleForHeader(Sheet sheet) {
        // Create font
        Font font = sheet.getWorkbook().createFont();
        font.setFontName("Times New Roman"); 
        font.setBold(true);
        font.setFontHeightInPoints((short) 14); // font size
        font.setColor(IndexedColors.WHITE.getIndex()); // text color
 
        // Create CellStyle
        CellStyle cellStyle = sheet.getWorkbook().createCellStyle();
        cellStyle.setFont(font);
        cellStyle.setFillForegroundColor(IndexedColors.BLACK.getIndex());
        cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        
        
        
        return cellStyle;
    }

    private void excel2() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Tổng Doanh Thu Phòng");
            spreadsheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 3));
            
            CellStyle cs = createStyleForHeader(spreadsheet);
            cs.setAlignment(HorizontalAlignment.CENTER);
            
            
            CellStyle cs2 = createStyleForHeader(spreadsheet);
            cs2.setFillForegroundColor(IndexedColors.BLUE.getIndex());           
            cs2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cs2.setAlignment(HorizontalAlignment.CENTER);
            
            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Tổng Doanh Thu Phòng của Khách Sạn");
            cell.setCellStyle(cs2);

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Tên Phòng");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Ngày Check In");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Ngày Check Out");
            
            cell = row.createCell(3, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Tổng Tiền");
                       
            for(int i = 0; i < tblDoanhThuPhong.getRowCount();i++){
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short)400);
                row.createCell(0).setCellValue(tblDoanhThuPhong.getValueAt(i, 0).toString());
                if(tblDoanhThuPhong.getValueAt(i, 1)==null){
                    row.createCell(1).setCellValue("");
                }else{
                    row.createCell(1).setCellValue(tblDoanhThuPhong.getValueAt(i, 1).toString());
                }
                if(tblDoanhThuPhong.getValueAt(i, 2)==null){
                    row.createCell(2).setCellValue("");
                }else{
                    row.createCell(2).setCellValue(tblDoanhThuPhong.getValueAt(i, 2).toString());
                }               
                row.createCell(3).setCellValue(tblDoanhThuPhong.getValueAt(i, 3).toString());
            }
            autosizeColumn(spreadsheet, 5);
            //FileOutputStream out = new FileOutputStream(new File("D:/hv.xlsx"));
            JFileChooser fc = new JFileChooser();
            if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File name = fc.getSelectedFile();
                FileOutputStream out = new FileOutputStream(name);
                workbook.write(out);
                out.close();
                MsgBox.alert(this, "Lưu Thành Công !");
            }
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lưu thất bại !");
        }
    }

    private void excel3() {
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("Tổng Doanh Thu Dich Vu");
            spreadsheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2));

            CellStyle cs = createStyleForHeader(spreadsheet);
            cs.setAlignment(HorizontalAlignment.CENTER);
            
            CellStyle cs2 = createStyleForHeader(spreadsheet);
            cs2.setFillForegroundColor(IndexedColors.BLUE.getIndex());           
            cs2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cs2.setAlignment(HorizontalAlignment.CENTER);
            
            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 2);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Tổng Doanh Thu Phòng của Khách Sạn");
            cell.setCellStyle(cs2);

            row = spreadsheet.createRow((short) 3);
            row.setHeight((short) 500);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Mã Dịch Vụ");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Tên Dịch Vụ");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellStyle(cs);
            cell.setCellValue("Tổng Tiền");
            
                       
            for(int i = 0; i < tblDoanhThuDichVu.getRowCount();i++){
                row = spreadsheet.createRow((short) 4 + i);
                row.setHeight((short)400);
                row.createCell(0).setCellValue(tblDoanhThuDichVu.getValueAt(i, 0).toString());
                row.createCell(1).setCellValue(tblDoanhThuDichVu.getValueAt(i, 1).toString());
                row.createCell(2).setCellValue(tblDoanhThuDichVu.getValueAt(i, 2).toString());
            }
            autosizeColumn(spreadsheet, 5);
            //FileOutputStream out = new FileOutputStream(new File("D:/hv.xlsx"));
            JFileChooser fc = new JFileChooser();
            if(fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File name = fc.getSelectedFile();
                FileOutputStream out = new FileOutputStream(name);
                workbook.write(out);
                out.close();
                MsgBox.alert(this, "Lưu Thành Công !");
            }
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lưu thất bại !");
        }
    }
    //--------------------------------------------------------------------------   
    private XSSFCellStyle cellStyle(XSSFWorkbook wb, short fg) {// foreground, boder
        XSSFCellStyle style = wb.createCellStyle();
        style.setFillForegroundColor(fg);
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style = styleBoder(style);
        return style;
    }

    private XSSFCellStyle styleBoder(XSSFCellStyle style){
        style.setBorderTop(BorderStyle.MEDIUM);
        style.setBorderBottom(BorderStyle.MEDIUM);
        style.setBorderLeft(BorderStyle.MEDIUM);
        style.setBorderRight(BorderStyle.MEDIUM);
        return style;
    }
    
    private Cell cell(Cell cell,int index, XSSFRow row, XSSFCellStyle style, String name,HorizontalAlignment align){
        cell = row.createCell( index, CellType.STRING);
        cell.setCellValue(name);
        style.setAlignment(align);
        cell.setCellStyle(style);
        return cell;
    }
    
    private void printExel() {
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet sheet = wb.createSheet("Doanh thu");
        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 3));
        sheet.setColumnWidth(0, 3000);
        sheet.setColumnWidth(1, 4000);
        sheet.setColumnWidth(2, 4000);
        sheet.setColumnWidth(3, 4000);

        XSSFRow row = null;
        Cell cell = null;
        XSSFCellStyle style;

        style = wb.createCellStyle();

        row = sheet.createRow((short) 2);
        
        XSSFFont font = wb.createFont();
        font.setColor(IndexedColors.DARK_RED.getIndex());
        font.setFontHeight(18);
        font.setBold(true);
        
        style.setFont(font);
        cell(cell, 0, row, style, "Tổng Doanh Thu",HorizontalAlignment.CENTER);
        
        row = sheet.createRow(3);

        //cell(cell,0, row, cellStyle(wb, IndexedColors.YELLOW.getIndex()), "STT", HorizontalAlignment.CENTER);

        XSSFCellStyle stylee = cellStyle(wb, IndexedColors.GREY_25_PERCENT.getIndex());
        
        
        cell(cell, 0, row, stylee, "Mã Hóa Đơn",HorizontalAlignment.CENTER);
        cell(cell, 1, row, stylee, "Ngày Thu Phí",HorizontalAlignment.CENTER);
        cell(cell, 2, row, stylee, "Nhân Viên Thu", HorizontalAlignment.CENTER);
        cell(cell, 3, row, stylee, "Tổng Tiền",HorizontalAlignment.CENTER);

        try {
            for (int i = 0; i < tblTongDoanhThu.getRowCount();i++) {
                row = sheet.createRow(4 + i);

                style = wb.createCellStyle();// tạo ra style
                style = styleBoder(style);
                cell(cell, 0, row, style, tblTongDoanhThu.getValueAt(i, 0).toString(),HorizontalAlignment.CENTER);
                if(tblTongDoanhThu.getValueAt(i, 1)==null){
                    cell(cell, 1, row, style, "",HorizontalAlignment.CENTER);
                }else{
                    cell(cell, 1, row, style, tblTongDoanhThu.getValueAt(i, 1).toString(),HorizontalAlignment.CENTER);
                }
                
                cell(cell, 2, row, style, tblTongDoanhThu.getValueAt(i, 2).toString(),HorizontalAlignment.CENTER);
                cell(cell, 3, row, style, tblTongDoanhThu.getValueAt(i, 3).toString(),HorizontalAlignment.CENTER);
            }

            JFileChooser jFileChooser = new JFileChooser();
            int chose = jFileChooser.showSaveDialog(this);
            if (chose == JFileChooser.APPROVE_OPTION) {
                File f = new File(jFileChooser.getSelectedFile().getPath());
                FileOutputStream out = new FileOutputStream(f + ".xlsx");
                wb.write(out);
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void printExel2() {
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet sheet = wb.createSheet("Doanh thu");
        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 3));
        sheet.setColumnWidth(0, 3000);
        sheet.setColumnWidth(1, 4000);
        sheet.setColumnWidth(2, 4000);
        sheet.setColumnWidth(3, 4000);

        XSSFRow row = null;
        Cell cell = null;
        XSSFCellStyle style;

        style = wb.createCellStyle();

        row = sheet.createRow((short) 2);
        
        XSSFFont font = wb.createFont();
        font.setColor(IndexedColors.DARK_RED.getIndex());
        font.setFontHeight(18);
        font.setBold(true);
        
        style.setFont(font);
        cell(cell, 0, row, style, "Tổng Doanh Thu Phòng",HorizontalAlignment.CENTER);
        
        row = sheet.createRow(3);

        //cell(cell,0, row, cellStyle(wb, IndexedColors.YELLOW.getIndex()), "STT", HorizontalAlignment.CENTER);

        XSSFCellStyle stylee = cellStyle(wb, IndexedColors.GREY_25_PERCENT.getIndex());
        
        
        cell(cell, 0, row, stylee, "Tên Phòng",HorizontalAlignment.CENTER);
        cell(cell, 1, row, stylee, "Ngày Check In",HorizontalAlignment.CENTER);
        cell(cell, 2, row, stylee, "Nhân Check Out", HorizontalAlignment.CENTER);
        cell(cell, 3, row, stylee, "Tổng Tiền",HorizontalAlignment.CENTER);

        try {
            for (int i = 0; i < tblDoanhThuPhong.getRowCount();i++) {
                row = sheet.createRow(4 + i);

                style = wb.createCellStyle();// tạo ra style
                style = styleBoder(style);
                cell(cell, 0, row, style, tblDoanhThuPhong.getValueAt(i, 0).toString(),HorizontalAlignment.CENTER);
                if(tblDoanhThuPhong.getValueAt(i, 1)==null){
                    cell(cell, 1, row, style, "",HorizontalAlignment.CENTER);
                }else{
                    cell(cell, 1, row, style, tblDoanhThuPhong.getValueAt(i, 1).toString(),HorizontalAlignment.CENTER);
                }
                if(tblDoanhThuPhong.getValueAt(i, 2)==null){
                    cell(cell, 2, row, style, "",HorizontalAlignment.CENTER);
                }else{
                    cell(cell, 2, row, style, tblDoanhThuPhong.getValueAt(i, 2).toString(),HorizontalAlignment.CENTER);
                }
                
                cell(cell, 3, row, style, tblDoanhThuPhong.getValueAt(i, 3).toString(),HorizontalAlignment.CENTER);
            }

            JFileChooser jFileChooser = new JFileChooser();
            int chose = jFileChooser.showSaveDialog(this);
            if (chose == JFileChooser.APPROVE_OPTION) {
                File f = new File(jFileChooser.getSelectedFile().getPath());
                FileOutputStream out = new FileOutputStream(f + ".xlsx");
                wb.write(out);
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void printExel3() {
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet sheet = wb.createSheet("Doanh thu");
        sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 2));
        sheet.setColumnWidth(0, 3000);
        sheet.setColumnWidth(1, 8000);
        sheet.setColumnWidth(2, 4000);

        XSSFRow row = null;
        Cell cell = null;
        XSSFCellStyle style;

        style = wb.createCellStyle();

        row = sheet.createRow((short) 2);
        
        XSSFFont font = wb.createFont();
        font.setColor(IndexedColors.DARK_RED.getIndex());
        font.setFontHeight(18);
        font.setBold(true);
        
        style.setFont(font);
        cell(cell, 0, row, style, "Tổng Doanh Thu Dịch Vụ",HorizontalAlignment.CENTER);
        
        row = sheet.createRow(3);

        //cell(cell,0, row, cellStyle(wb, IndexedColors.YELLOW.getIndex()), "STT", HorizontalAlignment.CENTER);

        XSSFCellStyle stylee = cellStyle(wb, IndexedColors.GREY_25_PERCENT.getIndex());
        
        
        cell(cell, 0, row, stylee, "Tổng Tiền",HorizontalAlignment.CENTER);
        cell(cell, 1, row, stylee, "Tên Dịch Vụ",HorizontalAlignment.CENTER);
        cell(cell, 2, row, stylee, "Tổng Tiền Dịch Vụ", HorizontalAlignment.CENTER);

        try {
            for (int i = 0; i < tblDoanhThuDichVu.getRowCount();i++) {
                row = sheet.createRow(4 + i);

                style = wb.createCellStyle();// tạo ra style
                style = styleBoder(style);
                cell(cell, 0, row, style, tblDoanhThuDichVu.getValueAt(i, 0).toString(),HorizontalAlignment.CENTER);               
                cell(cell, 1, row, style, tblDoanhThuDichVu.getValueAt(i, 1).toString(), HorizontalAlignment.CENTER);
                cell(cell, 2, row, style, tblDoanhThuDichVu.getValueAt(i, 2).toString(), HorizontalAlignment.CENTER);
            }

            JFileChooser jFileChooser = new JFileChooser();
            int chose = jFileChooser.showSaveDialog(this);
            if (chose == JFileChooser.APPROVE_OPTION) {
                File f = new File(jFileChooser.getSelectedFile().getPath());
                FileOutputStream out = new FileOutputStream(f + ".xlsx");
                wb.write(out);
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
